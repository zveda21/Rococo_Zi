services:
  rococo-all-db:
    image: postgres:15.1
    container_name: rococo-all-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres_zi
      POSTGRES_PASSWORD: secret
      CREATE_DATABASES: "rococo-auth,rococo-artist,rococo-userdata,rococo-museum,rococo-painting"
      TZ: GMT+3
      PGTZ: GMT+3
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/script:/docker-entrypoint-initdb.d
    command: [ "postgres", "-c", "max_prepared_transactions=100" ]
    networks:
      - rococo-network
    healthcheck:
      test: [ "CMD", "pg_isready" , "-U", "postgres_zi" ]
      interval: 3s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - rococo-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_NAMES: PLAINTEXT
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - rococo-network

  auth.rococo.dc:
    image: zveda044/rococo-auth-docker:latest
    container_name: auth.rococo.dc
    ports:
      - "9000:9000"
    restart: always
    depends_on:
      rococo-all-db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - rococo-network

  userdata.rococo.dc:
    image: zveda044/rococo-userdata-docker:latest
    container_name: userdata.rococo.dc
    ports:
      - "8089:8089"
    depends_on:
      rococo-all-db:
        condition: service_healthy
      kafka:
        condition: service_started
      auth.rococo.dc:
        condition: service_started
    networks:
      - rococo-network
    healthcheck:
      test: "wget --spider http://localhost:8089/actuator/health || exit 1"
      interval: 6s
      timeout: 6s
      retries: 10

  artist.rococo.dc:
    image: zveda044/rococo-artist-docker:latest
    container_name: artist.rococo.dc
    ports:
      - "8282:8282"
    depends_on:
      rococo-all-db:
        condition: service_healthy
    networks:
      - rococo-network
    healthcheck:
      test: "wget --spider http://localhost:8282/actuator/health || exit 1"
      interval: 6s
      timeout: 6s
      retries: 10

  museum.rococo.dc:
    image: zveda044/rococo-museum-docker:latest
    container_name: museum.rococo.dc
    ports:
      - "8383:8383"
    depends_on:
      rococo-all-db:
        condition: service_healthy
    networks:
      - rococo-network
    healthcheck:
      test: "wget --spider http://localhost:8383/actuator/health || exit 1"
      interval: 6s
      timeout: 6s
      retries: 10

  painting.rococo.dc:
    image: zveda044/rococo-painting-docker:latest
    container_name: painting.rococo.dc
    ports:
      - "8484:8484"
    depends_on:
      rococo-all-db:
        condition: service_healthy
    networks:
      - rococo-network
    healthcheck:
      test: "wget --spider http://localhost:8484/actuator/health || exit 1"
      interval: 6s
      timeout: 6s
      retries: 10

  gateway.rococo.dc:
    image: zveda044/rococo-gateway-docker:latest
    container_name: gateway.rococo.dc
    ports:
      - "8080:8080"
    depends_on:
      auth.rococo.dc:
        condition: service_started
      userdata.rococo.dc:
        condition: service_healthy
      artist.rococo.dc:
        condition: service_healthy
      museum.rococo.dc:
        condition: service_healthy
      painting.rococo.dc:
        condition: service_healthy
    networks:
      - rococo-network

  frontend.rococo.dc:
    container_name: frontend.rococo.dc
    image: zveda044/rococo-client-docker:latest
    build:
      context: ./rococo-client
      dockerfile: ./Dockerfile
    ports:
      - 80:80
    depends_on:
      gateway.rococo.dc:
        condition: service_started
    networks:
      - rococo-network

  selenoid:
    profiles:
      - test
    container_name: selenoid
    image: aerokube/selenoid:1.11.3
    platform: linux/${ARCH}
    volumes:
      - ./selenoid:/etc/selenoid
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    command: [ "-conf", "/etc/selenoid/browsers.json", "-limit", "3", "-video-output-dir", "/opt/selenoid/video", "-log-output-dir", "/opt/selenoid/logs", "-container-network", "rococo_zi_rococo-network" ]
    ports:
      - 4444:4444
    networks:
      - rococo-network

  selenoid-ui:
    profiles:
      - test
    container_name: selenoid-ui
    image: aerokube/selenoid-ui:1.10.11
    depends_on:
      - selenoid
    restart: unless-stopped
    ports:
      - 9091:8080
    command: [ "--selenoid-uri", "http://selenoid:4444" ]
    networks:
      - rococo-network

  rococo-e2e:
    profiles: [ test ]
    container_name: rococo-e2e
    image: zveda044/rococo-e2e-tests:latest
    build:
      context: ./
      dockerfile: ./rococo-e2e-tests/Dockerfile
    environment:
      - PROFILE=docker
      - ALLURE_DOCKER_API=${ALLURE_DOCKER_API}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - BUILD_URL=${BUILD_URL}
      - HEAD_COMMIT_MESSAGE=${HEAD_COMMIT_MESSAGE}
      - EXECUTION_TYPE=${EXECUTION_TYPE}
    volumes:
      - ./allure-results:/rococo/rococo-e2e-tests/allure-results
    depends_on:
      frontend.rococo.dc:
        condition: service_started
    networks:
      - rococo-network

  rococo-allure:
    profiles: [ test ]
    container_name: rococo-allure
    image: frankescobar/allure-docker-service:2.27.0
    depends_on:
      - rococo-e2e
    environment:
      - CHECK_RESULTS_EVERY_SECONDS=5
      - KEEP_HISTORY=1
    volumes:
      - ./allure-results:/app/allure-results
    ports:
      - "5050:5050"
    networks:
      - rococo-network

  allure-ui:
    profiles: [ test ]
    container_name: allure-ui
    image: frankescobar/allure-docker-service-ui:7.0.3
    depends_on:
      - rococo-allure
    environment:
      - ALLURE_DOCKER_PUBLIC_API_URL=http://localhost:5050
    ports:
      - "5252:5252"
    networks:
      - rococo-network

networks:
  rococo-network:
    driver: bridge

volumes:
  allure-results:
  pgdata:
