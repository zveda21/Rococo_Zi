plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib' version '3.4.1'
    id 'java'
}

group = 'guru.qa'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    runtimeOnly "org.postgresql:postgresql:${project.ext.postgresDriverVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${project.ext.openApiVersion}"
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jib {
    container {
        ports = ['8080']
        jvmFlags = ["-Dspring.profiles.active=" + (System.getenv("PROFILE") ?: "local")]
        environment = [
                'VAULT_TOKEN': System.getenv("VAULT_TOKEN") ?: "",
                'TZ'         : 'Europe/Moscow'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Zi_Yan',
                'version'   : project.version.toString()
        ]
    }
    from {
        image = project.ext.dockerImage.toString()
        auth {
            username = System.getenv("DOCKER_USERNAME") ?: ""
            password = System.getenv("DOCKER_PASSWORD") ?: ""
        }
        platforms {
            platform {
                architecture = project.ext.dockerArch.toString()
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.getenv("PROFILE") ?: "local"}"
        tags = ['latest', project.version.toString()]
        auth {
            username = System.getenv("DOCKER_USERNAME") ?: ""
            password = System.getenv("DOCKER_PASSWORD") ?: ""
        }
    }
}

test {
    useJUnitPlatform()
}