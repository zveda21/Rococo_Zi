plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'guru.qa'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-web-services') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.kafka:spring-kafka:${project.ext.springKafkaVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${project.ext.flywayVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    runtimeOnly "org.postgresql:postgresql:${project.ext.postgresDriverVersion}"

}

jib {
    container {
        ports = ['8089']
        jvmFlags = ["-Dspring.profiles.active=" + (System.getenv("PROFILE") ?: "local")]
        environment = [
                'VAULT_TOKEN': System.getenv("VAULT_TOKEN") ?: "",
                'TZ'         : 'Europe/Moscow'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Zi_Yan',
                'version'   : project.version.toString()
        ]
    }
    from {
        image = project.ext.dockerImage.toString()
        auth {
            username = System.getenv("DOCKER_USERNAME") ?: ""
            password = System.getenv("DOCKER_PASSWORD") ?: ""
        }
        platforms {
            platform {
                architecture = project.ext.dockerArch.toString()
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.getenv("PROFILE") ?: "local"}"
        tags = ['latest', project.version.toString()]
        auth {
            username = System.getenv("DOCKER_USERNAME") ?: ""
            password = System.getenv("DOCKER_PASSWORD") ?: ""
        }
    }
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test

tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
